{"version":3,"sources":["context/features/audioPlayerSlice.ts","context/features/filesSlice.ts","context/features/globalSlice.ts","context/store.ts","style/components.tsx","components/AudioPlayer/AudioPlayer.tsx","components/AudioPlayer/TimeBar.tsx","components/AudioPlayer/TimeBlock.tsx","components/TrackList/TrackList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["audioPlayerSlice","createSlice","name","initialState","currentTime","duration","reducers","setCurrentTime","state","action","payload","setDuration","actions","selectCurrentTime","audioPlayer","selectDuration","filesSlice","uploadFiles","selectedFile","addUploadFile","push","setSelectFile","selectUploadFiles","files","selectFile","globalSlice","loading","setLoading","selectLoading","global","store","configureStore","reducer","filesReducer","audioPlayerReducer","globalReducer","ToggleButton","styled","Button","active","Player","div","AudioPlayer","audioFile","useState","isPlaying","setIsPlaying","isCanPlay","setIsCanPlay","isLooped","setIsLooped","ref","useRef","dispatch","useDispatch","useSelector","setAudioCurrentTime","value","current","isTrackEnding","useEffect","play","pause","disabled","size","type","shape","icon","BackwardOutlined","onClick","ForwardOutlined","RedoOutlined","prev","PauseCircleOutlined","PlayCircleOutlined","selector","src","id","onCanPlay","onLoadedData","onTimeUpdate","Slider","AntSlider","TimeBar","isPlayingInitialValue","min","max","onChange","e","onAfterChange","formatNumberTime","time","getAudioDuration","intDuration","intervalToDuration","start","end","minutes","seconds","Time","TimeBlock","AntItem","List","Item","ListItem","selected","TrackList","itemLayout","dataSource","renderItem","fileItem","uid","style","Meta","avatar","cover","title","artist","description","TabPane","Tabs","possibleAudioType","App","isModalVisible","setIsModalVisible","file","a","convertToArrayBuffer","getTags","tags","getAudioCover","album","get","year","message","error","Promise","resolve","reject","jsmediatags","onSuccess","onError","fr","FileReader","readAsDataURL","onload","result","onerror","picture","base64String","data","map","String","fromCharCode","join","format","window","btoa","length","spinning","visible","closable","footer","centered","multiple","showUploadList","beforeUpload","includes","readFile","UploadOutlined","height","renderThumbVertical","props","className","color","tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc501e40.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\ntype AudioPlayer = {\r\n    currentTime: number;\r\n    duration: number;\r\n};\r\n\r\nconst initialState: AudioPlayer = {\r\n    currentTime: 0,\r\n    duration: 0,\r\n};\r\n\r\nexport const audioPlayerSlice = createSlice({\r\n    name: 'audioPlayer',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentTime: (state, action: PayloadAction<number>) => {\r\n            state.currentTime = action.payload;\r\n        },\r\n        setDuration: (state, action: PayloadAction<number>) => {\r\n            state.duration = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setCurrentTime, setDuration } = audioPlayerSlice.actions;\r\n\r\nexport const selectCurrentTime = (state: RootState) =>\r\n    state.audioPlayer.currentTime;\r\n\r\nexport const selectDuration = (state: RootState) => state.audioPlayer.duration;\r\n\r\nexport default audioPlayerSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { GetArrayType, Maybe } from 'constants/types';\r\nimport { RootState } from 'context/store';\r\n\r\nexport type AudioFile = {\r\n    uid: string;\r\n    type: string;\r\n    cover: Maybe<string>;\r\n    album: Maybe<string>;\r\n    artist: Maybe<string>;\r\n    title: Maybe<string>;\r\n    year: Maybe<string>;\r\n    src: string;\r\n};\r\n\r\ntype Initial = {\r\n    uploadFiles: AudioFile[];\r\n    selectedFile: AudioFile | null;\r\n};\r\n\r\nconst initialState: Initial = {\r\n    uploadFiles: [],\r\n    selectedFile: null,\r\n};\r\n\r\nexport const filesSlice = createSlice({\r\n    name: 'files',\r\n    initialState,\r\n    reducers: {\r\n        addUploadFile: (\r\n            state,\r\n            action: PayloadAction<\r\n                GetArrayType<typeof initialState['uploadFiles']>\r\n            >\r\n        ) => {\r\n            state.uploadFiles.push(action.payload);\r\n        },\r\n        setSelectFile: (\r\n            state,\r\n            action: PayloadAction<typeof initialState['selectedFile']>\r\n        ) => {\r\n            state.selectedFile = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addUploadFile, setSelectFile } = filesSlice.actions;\r\n\r\nexport const selectUploadFiles = (state: RootState) => state.files.uploadFiles;\r\n\r\nexport const selectFile = (state: RootState) => state.files.selectedFile;\r\n\r\nexport default filesSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n};\r\n\r\nexport const globalSlice = createSlice({\r\n    name: 'global',\r\n    initialState,\r\n    reducers: {\r\n        setLoading: (\r\n            state,\r\n            action: PayloadAction<typeof initialState.loading>\r\n        ) => {\r\n            state.loading = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setLoading } = globalSlice.actions;\r\n\r\nexport const selectLoading = (state: RootState) => state.global.loading;\r\n\r\nexport default globalSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport audioPlayerReducer from 'context/features/audioPlayerSlice';\r\nimport filesReducer from 'context/features/filesSlice';\r\nimport globalReducer from 'context/features/globalSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        files: filesReducer,\r\n        audioPlayer: audioPlayerReducer,\r\n        global: globalReducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import { Button } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport const ToggleButton = styled(Button)<{ active: 0 | 1 }>`\r\n    &.ant-btn,\r\n    &.ant-btn:focus {\r\n        background-color: ${({ active }) => (active ? '#095cb5' : null)};\r\n        border-color: ${({ active }) => (active ? '#095cb5' : null)};\r\n    }\r\n\r\n    &.ant-btn:hover {\r\n        background-color: ${({ active }) => (active ? '#177ddc' : null)};\r\n        border-color: ${({ active }) => (active ? '#177ddc' : null)};\r\n    }\r\n`;\r\n","import {\r\n    BackwardOutlined,\r\n    ForwardOutlined,\r\n    PauseCircleOutlined,\r\n    PlayCircleOutlined,\r\n    RedoOutlined,\r\n} from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport { TimeBar, TimeBlock } from 'components/AudioPlayer';\r\nimport {\r\n    selectCurrentTime,\r\n    selectDuration,\r\n    setCurrentTime,\r\n    setDuration,\r\n} from 'context/features/audioPlayerSlice';\r\nimport { AudioFile } from 'context/features/filesSlice';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ToggleButton } from 'style/components';\r\nimport styled from 'styled-components';\r\n\r\nconst Player = styled.div`\r\n    display: flex;\r\n    background-color: #434343;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    /* .ant-slider-track {\r\n        background-color: red;\r\n    } */\r\n    position: fixed;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n\r\n    & > button {\r\n        margin: 0px 2px;\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    audioFile: AudioFile;\r\n};\r\n\r\nfunction AudioPlayer({ audioFile }: Props) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isCanPlay, setIsCanPlay] = useState(false);\r\n    const [isLooped, setIsLooped] = useState(false);\r\n    const ref = useRef<HTMLAudioElement | null>(null);\r\n    const dispatch = useDispatch();\r\n    const duration = useSelector(selectDuration);\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false);\r\n    };\r\n\r\n    const play = () => {\r\n        setIsPlaying(true);\r\n    };\r\n\r\n    const setAudioCurrentTime = (value: number) => {\r\n        const audioRef = ref.current as HTMLAudioElement;\r\n        audioRef.currentTime = value;\r\n    };\r\n\r\n    const rewind = () => {\r\n        setAudioCurrentTime(0);\r\n    };\r\n\r\n    const fastForward = () => {\r\n        setAudioCurrentTime(duration);\r\n        setIsPlaying(false);\r\n    };\r\n\r\n    const loop = () => {\r\n        setIsLooped((prev) => !prev);\r\n    };\r\n\r\n    const handleTimeUpdate = () => {\r\n        dispatch(setCurrentTime(ref?.current?.currentTime || 0));\r\n\r\n        if (\r\n            isTrackEnding(\r\n                ref?.current?.currentTime || 0,\r\n                ref?.current?.duration || 0\r\n            ) &&\r\n            isLooped\r\n        ) {\r\n            setAudioCurrentTime(0);\r\n            ref.current?.play();\r\n        }\r\n\r\n        if (isTrackEnding(ref?.current?.currentTime, ref?.current?.duration)) {\r\n            setIsPlaying(false);\r\n        }\r\n    };\r\n\r\n    const isTrackEnding = (currentTime?: number, duration?: number) => {\r\n        if (!currentTime || !duration) {\r\n            return false;\r\n        }\r\n\r\n        return currentTime === duration;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isPlaying) {\r\n            ref.current?.play();\r\n        } else {\r\n            ref.current?.pause();\r\n        }\r\n    }, [isPlaying, audioFile]);\r\n\r\n    return (\r\n        <Player>\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<BackwardOutlined />}\r\n                onClick={rewind}\r\n            />\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<ForwardOutlined />}\r\n                onClick={fastForward}\r\n            />\r\n            <ToggleButton\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<RedoOutlined />}\r\n                active={isLooped ? 1 : 0}\r\n                onClick={loop}\r\n            />\r\n            {isPlaying ? (\r\n                <Button\r\n                    disabled={!isCanPlay}\r\n                    size=\"large\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    icon={<PauseCircleOutlined />}\r\n                    onClick={stop}\r\n                />\r\n            ) : (\r\n                <Button\r\n                    disabled={!isCanPlay}\r\n                    size=\"large\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    icon={<PlayCircleOutlined />}\r\n                    onClick={play}\r\n                />\r\n            )}\r\n            <TimeBlock selector={selectCurrentTime} />\r\n            <audio\r\n                src={audioFile.src}\r\n                id=\"audio\"\r\n                ref={ref}\r\n                onCanPlay={() => {\r\n                    setIsCanPlay(true);\r\n                }}\r\n                onLoadedData={() => {\r\n                    dispatch(setDuration(ref?.current?.duration || 0));\r\n                }}\r\n                onTimeUpdate={handleTimeUpdate}\r\n            />\r\n            <TimeBar\r\n                setAudioCurrentTime={setAudioCurrentTime}\r\n                setIsPlaying={setIsPlaying}\r\n                isPlaying={isPlaying}\r\n            />\r\n            <TimeBlock selector={selectDuration} />\r\n        </Player>\r\n    );\r\n}\r\n\r\nexport default AudioPlayer;\r\n","import { Slider as AntSlider } from 'antd';\r\nimport 'App.less';\r\nimport {\r\n    selectCurrentTime,\r\n    selectDuration,\r\n} from 'context/features/audioPlayerSlice';\r\nimport React, { useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\ntype Props = {\r\n    setAudioCurrentTime: (value: number) => void;\r\n    setIsPlaying: (value: boolean) => void;\r\n    isPlaying: boolean;\r\n};\r\n\r\nconst Slider = styled(AntSlider)`\r\n    flex: 1;\r\n`;\r\n\r\nfunction TimeBar({ setAudioCurrentTime, setIsPlaying, isPlaying }: Props) {\r\n    const duration = useSelector(selectDuration);\r\n    const currentTime = useSelector(selectCurrentTime);\r\n    const isPlayingInitialValue = useRef<null | boolean>(null);\r\n\r\n    return (\r\n        <Slider\r\n            value={currentTime}\r\n            min={0}\r\n            max={duration}\r\n            onChange={(e: any) => {\r\n                if (isPlayingInitialValue.current === null) {\r\n                    isPlayingInitialValue.current = isPlaying;\r\n                }\r\n                setIsPlaying(false);\r\n                setAudioCurrentTime(e);\r\n            }}\r\n            onAfterChange={(e: any) => {\r\n                setIsPlaying(!!isPlayingInitialValue.current);\r\n                isPlayingInitialValue.current = null;\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default TimeBar;\r\n","import 'App.less';\r\nimport { RootState } from 'context/store';\r\nimport { intervalToDuration } from 'date-fns';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst formatNumberTime = (time: number) => (time < 10 ? `0${time}` : `${time}`);\r\n\r\nconst getAudioDuration = (duration: number) => {\r\n    const intDuration = intervalToDuration({\r\n        start: 0,\r\n        end: duration * 1000,\r\n    });\r\n\r\n    return `${formatNumberTime(intDuration.minutes || 0)}:${formatNumberTime(\r\n        intDuration.seconds || 0\r\n    )}`;\r\n};\r\n\r\ntype Props = {\r\n    selector: (state: RootState) => number;\r\n};\r\n\r\nconst Time = styled.div`\r\n    margin: 0px 7px;\r\n`;\r\n\r\nfunction TimeBlock({ selector }: Props) {\r\n    const time = useSelector(selector);\r\n\r\n    return <Time>{getAudioDuration(time)}</Time>;\r\n}\r\n\r\nexport default TimeBlock;\r\n","import { List } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport 'App.less';\r\nimport {\r\n    selectFile,\r\n    selectUploadFiles,\r\n    setSelectFile,\r\n} from 'context/features/filesSlice';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst { Item: AntItem } = List;\r\n\r\nconst ListItem = styled(AntItem)<{ selected: 0 | 1 }>`\r\n    &:hover {\r\n        cursor: pointer;\r\n        background-color: #095cb575;\r\n    }\r\n    && {\r\n        background-color: ${({ selected }) => (selected ? '#095cb5' : null)};\r\n    }\r\n`;\r\n\r\nfunction TrackList() {\r\n    const files = useSelector(selectUploadFiles);\r\n    const dispatch = useDispatch();\r\n    const selectedFile = useSelector(selectFile);\r\n\r\n    return (\r\n        <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={files}\r\n            renderItem={(fileItem) => (\r\n                <ListItem\r\n                    selected={selectedFile?.uid === fileItem.uid ? 1 : 0}\r\n                    style={{}}\r\n                    onClick={() => {\r\n                        dispatch(setSelectFile(fileItem));\r\n                    }}\r\n                >\r\n                    <ListItem.Meta\r\n                        avatar={<Avatar src={fileItem.cover} />}\r\n                        title={fileItem.artist}\r\n                        description={fileItem.title}\r\n                    />\r\n                </ListItem>\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default TrackList;\r\n","import { UploadOutlined } from '@ant-design/icons';\r\nimport { Button, message, Spin, Tabs } from 'antd';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport Upload, { RcFile } from 'antd/lib/upload';\r\nimport 'App.less';\r\nimport AudioPlayer from 'components/AudioPlayer';\r\nimport TrackList from 'components/TrackList';\r\nimport {\r\n    addUploadFile,\r\n    selectFile,\r\n    selectUploadFiles,\r\n} from 'context/features/filesSlice';\r\nimport { selectLoading, setLoading } from 'context/features/globalSlice';\r\nimport * as jsmediatags from 'jsmediatags-web';\r\nimport { get } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\ninterface FileInfo {\r\n    tags: {\r\n        picture?: {\r\n            data: number[];\r\n            format: string;\r\n        };\r\n        year?: string;\r\n        album?: string;\r\n        artist?: string;\r\n        title?: string;\r\n    };\r\n}\r\n\r\nconst possibleAudioType = [\r\n    'audio/wav',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'audio/aac',\r\n    'audio/aacp',\r\n    'audio/ogg',\r\n    'audio/webm',\r\n    'audio/x-caf',\r\n    'audio/flac',\r\n];\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const files = useSelector(selectUploadFiles);\r\n    const selectedFile = useSelector(selectFile);\r\n    const loading = useSelector(selectLoading);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    async function readFile(file: RcFile) {\r\n        dispatch(setLoading(true));\r\n\r\n        try {\r\n            const src = await convertToArrayBuffer(file);\r\n            const tags = await getTags(file);\r\n            const cover = await getAudioCover(tags);\r\n\r\n            dispatch(\r\n                addUploadFile({\r\n                    uid: file.uid,\r\n                    type: file.type,\r\n                    cover,\r\n                    album: get(tags, 'album'),\r\n                    artist: get(tags, 'artist'),\r\n                    title: get(tags, 'title'),\r\n                    year: get(tags, 'year'),\r\n                    src,\r\n                })\r\n            );\r\n        } catch (e) {\r\n            message.error(`Error while processing audio files`);\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n    }\r\n\r\n    function getTags(file: RcFile) {\r\n        return new Promise<FileInfo['tags']>((resolve, reject) => {\r\n            jsmediatags.read(file, {\r\n                onSuccess({ tags }: FileInfo) {\r\n                    resolve(tags);\r\n                },\r\n                onError(error: any) {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    function convertToArrayBuffer(file: RcFile) {\r\n        return new Promise<string>((resolve, reject) => {\r\n            var fr = new FileReader();\r\n            fr.readAsDataURL(file);\r\n            fr.onload = () => {\r\n                resolve(fr.result as string);\r\n            };\r\n            fr.onerror = (error) => {\r\n                reject(error);\r\n            };\r\n        });\r\n    }\r\n\r\n    const getAudioCover = (tags: FileInfo['tags']) => {\r\n        const { picture } = tags;\r\n\r\n        if (!picture) {\r\n            return null;\r\n        }\r\n\r\n        const { data } = picture;\r\n        const base64String = data\r\n            .map((value) => String.fromCharCode(value))\r\n            .join('');\r\n\r\n        return `data:${picture.format};base64,${window.btoa(base64String)}`;\r\n    };\r\n\r\n    const validateAudioFile = (type: string) =>\r\n        possibleAudioType.includes(type);\r\n\r\n    useEffect(() => {\r\n        if (files.length > 0) {\r\n            setIsModalVisible(false);\r\n        } else {\r\n            setIsModalVisible(true);\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Spin spinning={loading}>\r\n            <Modal\r\n                title=\"Upload your favourite music\"\r\n                visible={isModalVisible}\r\n                closable={false}\r\n                footer={null}\r\n                centered\r\n            >\r\n                <Upload\r\n                    multiple\r\n                    showUploadList={false}\r\n                    beforeUpload={(file) => {\r\n                        if (validateAudioFile(file.type)) {\r\n                            readFile(file);\r\n                        } else {\r\n                            message.error(\r\n                                `Incorrect audio format from ${file.name}`\r\n                            );\r\n                        }\r\n\r\n                        return false;\r\n                    }}\r\n                >\r\n                    <Button\r\n                        type=\"primary\"\r\n                        loading={loading}\r\n                        icon={<UploadOutlined />}\r\n                    >\r\n                        Select Files\r\n                    </Button>\r\n                </Upload>\r\n            </Modal>\r\n\r\n            <Scrollbars\r\n                style={{ height: 'calc(100vh - 60px)' }}\r\n                renderThumbVertical={({ style, ...props }) => {\r\n                    const thumbStyle = {\r\n                        color: `red`,\r\n                    };\r\n                    return (\r\n                        <div\r\n                            className=\"bg-color-primary\"\r\n                            style={{ ...style, ...thumbStyle }}\r\n                            {...props}\r\n                        />\r\n                    );\r\n                }}\r\n            >\r\n                {files.length > 0 && (\r\n                    <div className=\"card-container\">\r\n                        <Tabs type=\"card\">\r\n                            <TabPane tab=\"All\" key=\"1\">\r\n                                <TrackList />\r\n                            </TabPane>\r\n                            <TabPane tab=\"Genre\" key=\"2\">\r\n                                <p>soon</p>\r\n                            </TabPane>\r\n                            <TabPane tab=\"Artists\" key=\"3\">\r\n                                <p>soon</p>\r\n                            </TabPane>\r\n                        </Tabs>\r\n                    </div>\r\n                )}\r\n            </Scrollbars>\r\n            {selectedFile && <AudioPlayer audioFile={selectedFile} />}\r\n        </Spin>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { store } from 'context/store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}