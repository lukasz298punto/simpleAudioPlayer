{"version":3,"sources":["context/features/audioPlayerSlice.ts","context/features/globalSlice.ts","context/features/uploadFilesSlice.ts","context/store.ts","components/AudioPlayer/AudioPlayer.tsx","components/AudioPlayer/TimeBar.tsx","components/AudioPlayer/TimeBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["audioPlayerSlice","createSlice","name","initialState","currentTime","duration","reducers","setCurrentTime","state","action","payload","setDuration","actions","selectCurrentTime","audioPlayer","selectDuration","globalSlice","loading","setLoading","selectLoading","global","uploadFilesSlice","addFile","push","selectUploadFiles","uploadFiles","store","configureStore","reducer","uploadFilesReducer","audioPlayerReducer","globalReducer","Player","styled","div","AudioPlayer","useState","isPlaying","setIsPlaying","isCanPlay","setIsCanPlay","ref","useRef","dispatch","useDispatch","useSelector","console","count","files","setAudioCurrentTime","value","current","useEffect","play","pause","disabled","size","type","shape","icon","BackwardOutlined","onClick","FastBackwardOutlined","FastForwardOutlined","ForwardOutlined","RedoOutlined","PauseCircleOutlined","PlayCircleOutlined","selector","src","get","id","onCanPlay","onLoadedData","onTimeUpdate","e","TimeBar","min","max","onChange","onAfterChange","formatNumberTime","time","getAudioDuration","intDuration","intervalToDuration","start","end","minutes","seconds","TimeBlock","possibleAudioType","App","file","a","convertToArrayBuffer","x","getTags","tags","getAudioCover","cover","log","uid","album","artist","title","year","message","error","Promise","resolve","reject","jsmediatags","onSuccess","onError","fr","FileReader","readAsDataURL","onload","result","onerror","picture","base64String","data","map","String","fromCharCode","join","format","window","btoa","spinning","style","height","renderThumbVertical","props","className","color","multiple","showUploadList","beforeUpload","includes","readFile","UploadOutlined","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea4d2f8c.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\ntype AudioPlayer = {\r\n    currentTime: number;\r\n    duration: number;\r\n};\r\n\r\nconst initialState: AudioPlayer = {\r\n    currentTime: 0,\r\n    duration: 0,\r\n};\r\n\r\nexport const audioPlayerSlice = createSlice({\r\n    name: 'audioPlayer',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentTime: (state, action: PayloadAction<number>) => {\r\n            state.currentTime = action.payload;\r\n        },\r\n        setDuration: (state, action: PayloadAction<number>) => {\r\n            state.duration = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setCurrentTime, setDuration } = audioPlayerSlice.actions;\r\n\r\nexport const selectCurrentTime = (state: RootState) =>\r\n    state.audioPlayer.currentTime;\r\n\r\nexport const selectDuration = (state: RootState) => state.audioPlayer.duration;\r\n\r\nexport default audioPlayerSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n};\r\n\r\nexport const globalSlice = createSlice({\r\n    name: 'global',\r\n    initialState,\r\n    reducers: {\r\n        setLoading: (\r\n            state,\r\n            action: PayloadAction<typeof initialState.loading>\r\n        ) => {\r\n            state.loading = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setLoading } = globalSlice.actions;\r\n\r\nexport const selectLoading = (state: RootState) => state.global.loading;\r\n\r\nexport default globalSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Maybe } from 'constants/types';\r\nimport { RootState } from 'context/store';\r\n\r\nexport type AudioFile = {\r\n    uid: string;\r\n    type: string;\r\n    cover: Maybe<string>;\r\n    album: Maybe<string>;\r\n    artist: Maybe<string>;\r\n    title: Maybe<string>;\r\n    year: Maybe<string>;\r\n    src: string;\r\n};\r\n\r\nconst initialState: AudioFile[] = [];\r\n\r\nexport const uploadFilesSlice = createSlice({\r\n    name: 'uploadFiles',\r\n    initialState,\r\n    reducers: {\r\n        addFile: (state, action: PayloadAction<AudioFile>) => {\r\n            state.push(action.payload);\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addFile } = uploadFilesSlice.actions;\r\n\r\nexport const selectUploadFiles = (state: RootState) => state.uploadFiles;\r\n\r\nexport default uploadFilesSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport audioPlayerReducer from 'context/features/audioPlayerSlice';\r\nimport globalReducer from 'context/features/globalSlice';\r\nimport uploadFilesReducer from 'context/features/uploadFilesSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        uploadFiles: uploadFilesReducer,\r\n        audioPlayer: audioPlayerReducer,\r\n        global: globalReducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import {\r\n    BackwardOutlined,\r\n    FastBackwardOutlined,\r\n    FastForwardOutlined,\r\n    ForwardOutlined,\r\n    PauseCircleOutlined,\r\n    PlayCircleOutlined,\r\n    RedoOutlined,\r\n} from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport { TimeBar, TimeBlock } from 'components/AudioPlayer';\r\nimport {\r\n    selectCurrentTime,\r\n    selectDuration,\r\n    setCurrentTime,\r\n    setDuration,\r\n} from 'context/features/audioPlayerSlice';\r\nimport { selectUploadFiles } from 'context/features/uploadFilesSlice';\r\nimport { get } from 'lodash';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst Player = styled.div`\r\n    background-color: green;\r\n\r\n    .ant-slider-track {\r\n        background-color: red;\r\n    }\r\n`;\r\n\r\nfunction Blocke() {\r\n    console.count('Blocke');\r\n    const durr = useSelector(selectCurrentTime);\r\n\r\n    return <div>{durr}</div>;\r\n}\r\n\r\nfunction AudioPlayer() {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isCanPlay, setIsCanPlay] = useState(false);\r\n    // const [duration, setDuration] = useState(0);\r\n    // const [currentTime, setCurrentTime] = useState(0);\r\n    const ref = useRef<HTMLAudioElement | null>(null);\r\n    const dispatch = useDispatch();\r\n    let audio = null;\r\n\r\n    const duration = useSelector(selectDuration);\r\n\r\n    console.count('AudioPlayer');\r\n\r\n    const files = useSelector(selectUploadFiles);\r\n\r\n    const stop = () => {\r\n        setIsPlaying(false);\r\n    };\r\n\r\n    const play = () => {\r\n        setIsPlaying(true);\r\n    };\r\n\r\n    const setAudioCurrentTime = (value: number) => {\r\n        const audioRef = ref.current as HTMLAudioElement;\r\n        audioRef.currentTime = value;\r\n    };\r\n\r\n    const rewind = () => {\r\n        setAudioCurrentTime(0);\r\n    };\r\n\r\n    const fastForward = () => {\r\n        setAudioCurrentTime(duration);\r\n        setIsPlaying(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isPlaying) {\r\n            ref.current?.play();\r\n        } else {\r\n            ref.current?.pause();\r\n        }\r\n    }, [isPlaying]);\r\n\r\n    return (\r\n        <Player>\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<BackwardOutlined />}\r\n                onClick={rewind}\r\n            />\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<FastBackwardOutlined />}\r\n            />\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<FastForwardOutlined />}\r\n            />\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<ForwardOutlined />}\r\n                onClick={fastForward}\r\n            />\r\n            <Button\r\n                disabled={!isCanPlay}\r\n                size=\"large\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<RedoOutlined />}\r\n            />\r\n            {isPlaying ? (\r\n                <Button\r\n                    disabled={!isCanPlay}\r\n                    size=\"large\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    icon={<PauseCircleOutlined />}\r\n                    onClick={stop}\r\n                />\r\n            ) : (\r\n                <Button\r\n                    disabled={!isCanPlay}\r\n                    size=\"large\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    icon={<PlayCircleOutlined />}\r\n                    onClick={play}\r\n                />\r\n            )}\r\n            <TimeBlock selector={selectCurrentTime} />\r\n            <audio\r\n                src={get(files, '[0].src')}\r\n                id=\"audio\"\r\n                ref={ref}\r\n                // controls\r\n                onCanPlay={() => setIsCanPlay(true)}\r\n                onLoadedData={() =>\r\n                    dispatch(setDuration(ref?.current?.duration || 0))\r\n                }\r\n                onTimeUpdate={\r\n                    (e) =>\r\n                        dispatch(setCurrentTime(ref?.current?.currentTime || 0))\r\n                    // setCurrentTime(ref?.current?.currentTime || 0)\r\n                }\r\n            />\r\n            <TimeBlock selector={selectDuration} />\r\n            <TimeBar\r\n                setAudioCurrentTime={setAudioCurrentTime}\r\n                setIsPlaying={setIsPlaying}\r\n            />\r\n        </Player>\r\n    );\r\n}\r\n\r\nexport default AudioPlayer;\r\n","import { Slider } from 'antd';\r\nimport 'App.less';\r\nimport {\r\n    selectCurrentTime,\r\n    selectDuration,\r\n} from 'context/features/audioPlayerSlice';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\ntype Props = {\r\n    setAudioCurrentTime: (value: number) => void;\r\n    setIsPlaying: (value: boolean) => void;\r\n};\r\n\r\nfunction TimeBar({ setAudioCurrentTime, setIsPlaying }: Props) {\r\n    const duration = useSelector(selectDuration);\r\n    const currentTime = useSelector(selectCurrentTime);\r\n\r\n    // useEffect(() => {\r\n    //     setTime(currentTime);\r\n    // }, [currentTime]);\r\n\r\n    console.count('TimeBar');\r\n    return (\r\n        <Slider\r\n            // defaultValue={0}\r\n            value={currentTime}\r\n            min={0}\r\n            max={duration}\r\n            onChange={(e: any) => {\r\n                setIsPlaying(false);\r\n                setAudioCurrentTime(e);\r\n            }}\r\n            onAfterChange={(e: any) => setIsPlaying(true)}\r\n        />\r\n    );\r\n}\r\n\r\nexport default TimeBar;\r\n","import 'App.less';\r\nimport { RootState } from 'context/store';\r\nimport { intervalToDuration } from 'date-fns';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst formatNumberTime = (time: number) => (time < 10 ? `0${time}` : `${time}`);\r\n\r\nconst getAudioDuration = (duration: number) => {\r\n    const intDuration = intervalToDuration({\r\n        start: 0,\r\n        end: duration * 1000,\r\n    });\r\n\r\n    return `${formatNumberTime(intDuration.minutes || 0)}:${formatNumberTime(\r\n        intDuration.seconds || 0\r\n    )}`;\r\n};\r\n\r\ntype Props = {\r\n    selector: (state: RootState) => number;\r\n};\r\n\r\nfunction TimeBlock({ selector }: Props) {\r\n    console.count('TimeBlock');\r\n    const time = useSelector(selector);\r\n\r\n    return <div>{getAudioDuration(time)}</div>;\r\n}\r\n\r\nexport default TimeBlock;\r\n","import { UploadOutlined } from '@ant-design/icons';\r\nimport { Button, Image, List, message, Spin, Upload } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { RcFile } from 'antd/lib/upload';\r\nimport 'App.less';\r\nimport AudioPlayer from 'components/AudioPlayer';\r\nimport { selectLoading, setLoading } from 'context/features/globalSlice';\r\nimport { addFile, selectUploadFiles } from 'context/features/uploadFilesSlice';\r\nimport * as jsmediatags from 'jsmediatags-web';\r\nimport { get } from 'lodash';\r\nimport React, { useRef, useState } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ninterface FileInfo {\r\n    tags: {\r\n        picture?: {\r\n            data: number[];\r\n            format: string;\r\n        };\r\n        year?: string;\r\n        album?: string;\r\n        artist?: string;\r\n        title?: string;\r\n    };\r\n}\r\n\r\nconst possibleAudioType = [\r\n    'audio/wav',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'audio/aac',\r\n    'audio/aacp',\r\n    'audio/ogg',\r\n    'audio/webm',\r\n    'audio/x-caf',\r\n    'audio/flac',\r\n];\r\n\r\nfunction App() {\r\n    const ref = useRef<HTMLAudioElement | null>(null);\r\n    const [src, setSrc] = useState('');\r\n    const dispatch = useDispatch();\r\n    const files = useSelector(selectUploadFiles);\r\n    const loading = useSelector(selectLoading);\r\n\r\n    console.log(files, 'files');\r\n\r\n    async function readFile(file: RcFile) {\r\n        dispatch(setLoading(true));\r\n\r\n        try {\r\n            const src = await convertToArrayBuffer(file);\r\n            // const d: any = document.getElementById('audio');\r\n            const x = ref?.current;\r\n            if (x) {\r\n                x.src = src;\r\n            }\r\n            const tags = await getTags(file);\r\n            const cover = await getAudioCover(tags);\r\n\r\n            console.log(tags, 'tags');\r\n            console.log(get(tags, 'album'), 'album');\r\n            // setSrc(coverSrc);\r\n\r\n            dispatch(\r\n                addFile({\r\n                    uid: file.uid,\r\n                    type: file.type,\r\n                    cover,\r\n                    album: get(tags, 'album'),\r\n                    artist: get(tags, 'artist'),\r\n                    title: get(tags, 'title'),\r\n                    year: get(tags, 'year'),\r\n                    src,\r\n                })\r\n            );\r\n        } catch (e) {\r\n            message.error(`Error while processing audio files`);\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n    }\r\n\r\n    function getTags(file: RcFile) {\r\n        return new Promise<FileInfo['tags']>((resolve, reject) => {\r\n            jsmediatags.read(file, {\r\n                onSuccess({ tags }: FileInfo) {\r\n                    resolve(tags);\r\n                },\r\n                onError(error: any) {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    function convertToArrayBuffer(file: RcFile) {\r\n        return new Promise<string>((resolve, reject) => {\r\n            var fr = new FileReader();\r\n            fr.readAsDataURL(file);\r\n            fr.onload = () => {\r\n                resolve(fr.result as string);\r\n            };\r\n            fr.onerror = (error) => {\r\n                reject(error);\r\n            };\r\n        });\r\n    }\r\n\r\n    const getAudioCover = (tags: FileInfo['tags']) => {\r\n        const { picture } = tags;\r\n\r\n        if (!picture) {\r\n            return null;\r\n        }\r\n\r\n        const { data } = picture;\r\n        const base64String = data\r\n            .map((value) => String.fromCharCode(value))\r\n            .join('');\r\n\r\n        return `data:${picture.format};base64,${window.btoa(base64String)}`;\r\n    };\r\n\r\n    const validateAudioFile = (type: string) =>\r\n        possibleAudioType.includes(type);\r\n\r\n    return (\r\n        <Spin spinning={loading}>\r\n            <Scrollbars\r\n                style={{ height: '40vh' }}\r\n                renderThumbVertical={({ style, ...props }) => {\r\n                    const thumbStyle = {\r\n                        color: `red`,\r\n                    };\r\n                    return (\r\n                        <div\r\n                            className=\"bg-color-primary\"\r\n                            style={{ ...style, ...thumbStyle }}\r\n                            {...props}\r\n                        />\r\n                    );\r\n                }}\r\n            >\r\n                <div className=\"App\">\r\n                    <Image src={src} />\r\n                    <Upload\r\n                        multiple\r\n                        showUploadList={false}\r\n                        beforeUpload={(file) => {\r\n                            if (validateAudioFile(file.type)) {\r\n                                readFile(file);\r\n                            } else {\r\n                                message.error(\r\n                                    `Incorrect audio format from ${file.name}`\r\n                                );\r\n                            }\r\n\r\n                            return false;\r\n                        }}\r\n                    >\r\n                        <Button type=\"primary\" icon={<UploadOutlined />}>\r\n                            Select File\r\n                        </Button>\r\n                    </Upload>\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={files}\r\n                        renderItem={(item) => (\r\n                            <List.Item>\r\n                                <List.Item.Meta\r\n                                    avatar={<Avatar src={item.cover} />}\r\n                                    title={item.title}\r\n                                    description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </Scrollbars>\r\n            <AudioPlayer />\r\n        </Spin>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { store } from 'context/store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}