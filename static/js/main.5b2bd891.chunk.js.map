{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","ref","useRef","ref2","useState","fileList","src","setSrc","readFile","files","a","convertToArrayBuffer","res","console","log","current","x","getAudioCover","coverSrc","Promise","resolve","reject","fr","FileReader","readAsDataURL","onload","result","onerror","error","file","jsmediatags","onSuccess","tags","picture","base64String","data","map","value","String","fromCharCode","join","format","window","btoa","onError","useEffect","document","getElementById","props","beforeUpload","className","id","controls","icon","UploadOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gPAyHeA,MA3Gf,WACI,IAAMC,EAAMC,iBAAgC,MACtCC,EAAOD,iBAAgC,MAFlC,EAGqBE,mBAAgB,IAHrC,mBAGJC,EAHI,aAIWD,mBAAS,KAJpB,mBAIJE,EAJI,KAICC,EAJD,cAMIC,EANJ,8EAMX,WAAwBC,GAAxB,mBAAAC,EAAA,sEACsBC,EAAqBF,GAD3C,cACUG,EADV,OAGIC,QAAQC,IAAIb,EAAIc,UACVC,EAJV,OAIcf,QAJd,IAIcA,OAJd,EAIcA,EAAKc,WAEXC,EAAEV,IAAMM,GANhB,SAQ2BK,EAAcR,GARzC,OAQUS,EARV,OAUIX,EAAOW,GAEPL,QAAQC,IAAII,EAAU,YAZ1B,6CANW,sBAqBX,SAASP,EAAqBF,GAC1B,OAAO,IAAIU,SAAa,SAACC,EAASC,GAC9B,IAAIC,EAAK,IAAIC,WACbD,EAAGE,cAAcf,GACjBa,EAAGG,OAAS,WACRL,EAAQE,EAAGI,SAEfJ,EAAGK,QAAU,SAACC,GACVP,EAAOO,OAKnB,IAAMX,EAAgB,SAACY,GACnB,OAAO,IAAIV,SAAQ,SAACC,EAASC,GACzBS,OAAiBD,EAAM,CACnBE,UADmB,YACY,IAAnBC,EAAkB,EAAlBA,KACRnB,QAAQC,IAAIkB,EAAM,QADQ,IAElBC,EAAYD,EAAZC,QACR,IAAKA,EACD,OAAOZ,EAAO,6BAJQ,IAQpBa,EADWD,EAATE,KAEHC,KAAI,SAACC,GAAD,OAAWC,OAAOC,aAAaF,MACnCG,KAAK,IACJtB,EAAQ,eACVe,EAAQQ,OADE,mBAEHC,OAAOC,KAAKT,IAEvBd,EAAQF,IAEZ0B,QAlBmB,SAkBXhB,GACJP,EAAOO,UAmBvBiB,qBAAU,WACNhC,QAAQC,IAAIgC,SAASC,eAAe,UACpClC,QAAQC,IAAIb,GACZY,QAAQC,IAAIX,KACb,IAEH,IAAM6C,EAAQ,CACVC,aAAc,SAACpB,GAGX,OAFAhB,QAAQC,IAAIe,GACZrB,EAASqB,IACF,GAEXxB,YAGJ,OACI,sBAAK6C,UAAU,MAAf,UACI,uBAAOC,GAAG,QAAQlD,IAAKA,EAAKmD,UAAQ,IACpC,cAAC,IAAD,CAAO9C,IAAKA,IACZ,cAAC,IAAD,2BACQ0C,GADR,IAEI3C,SAAUA,EACV4C,aAAc,SAACpB,GAEX,OADArB,EAASqB,IACF,GALf,SAQI,cAAC,IAAD,CAAQwB,KAAM,cAACC,EAAA,EAAD,IAAd,gCCrGDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJpB,SAASC,eAAe,SAM5BQ,M","file":"static/js/main.5b2bd891.chunk.js","sourcesContent":["import { UploadOutlined } from '@ant-design/icons';\r\nimport { Button, Image, Upload } from 'antd';\r\nimport * as jsmediatags from 'jsmediatags-web';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface FileInfo {\r\n    tags: {\r\n        picture?: {\r\n            data: number[];\r\n            format: string;\r\n        };\r\n    };\r\n}\r\n\r\nfunction App() {\r\n    const ref = useRef<HTMLAudioElement | null>(null);\r\n    const ref2 = useRef<HTMLInputElement | null>(null);\r\n    const [fileList, setFileList] = useState<any[]>([]);\r\n    const [src, setSrc] = useState('');\r\n\r\n    async function readFile(files: File) {\r\n        const res = await convertToArrayBuffer(files);\r\n        // const d: any = document.getElementById('audio');\r\n        console.log(ref.current);\r\n        const x = ref?.current;\r\n        if (x) {\r\n            x.src = res;\r\n        }\r\n        const coverSrc = await getAudioCover(files);\r\n\r\n        setSrc(coverSrc);\r\n\r\n        console.log(coverSrc, 'coverSrc');\r\n    }\r\n\r\n    function convertToArrayBuffer(files: any) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            var fr = new FileReader();\r\n            fr.readAsDataURL(files);\r\n            fr.onload = () => {\r\n                resolve(fr.result);\r\n            };\r\n            fr.onerror = (error) => {\r\n                reject(error);\r\n            };\r\n        });\r\n    }\r\n\r\n    const getAudioCover = (file: File): Promise<string> => {\r\n        return new Promise((resolve, reject) => {\r\n            jsmediatags.read(file, {\r\n                onSuccess({ tags }: FileInfo) {\r\n                    console.log(tags, 'tags');\r\n                    const { picture } = tags;\r\n                    if (!picture) {\r\n                        return reject('File doesnt contain cover');\r\n                    }\r\n\r\n                    const { data } = picture;\r\n                    const base64String = data\r\n                        .map((value) => String.fromCharCode(value))\r\n                        .join('');\r\n                    const coverSrc = `data:${\r\n                        picture.format\r\n                    };base64,${window.btoa(base64String)}`;\r\n\r\n                    resolve(coverSrc);\r\n                },\r\n                onError(error: Error) {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n    };\r\n\r\n    function playAudioFile(file: ArrayBuffer) {\r\n        var context = new window.AudioContext();\r\n        context.decodeAudioData(file, function (buffer) {\r\n            var source = context.createBufferSource();\r\n            source.buffer = buffer;\r\n            source.connect(context.destination);\r\n            source.loop = false;\r\n            source.start(0);\r\n            console.log(source);\r\n            // source.start(0);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(document.getElementById('audio'));\r\n        console.log(ref);\r\n        console.log(ref2);\r\n    }, []);\r\n\r\n    const props = {\r\n        beforeUpload: (file: File) => {\r\n            console.log(file);\r\n            readFile(file);\r\n            return false;\r\n        },\r\n        fileList,\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <audio id=\"audio\" ref={ref} controls />\r\n            <Image src={src} />\r\n            <Upload\r\n                {...props}\r\n                fileList={fileList}\r\n                beforeUpload={(file) => {\r\n                    readFile(file);\r\n                    return false;\r\n                }}\r\n            >\r\n                <Button icon={<UploadOutlined />}>Select File</Button>\r\n            </Upload>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}