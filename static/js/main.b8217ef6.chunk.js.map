{"version":3,"sources":["context/features/audioPlayerSlice.ts","context/features/globalSlice.ts","context/features/uploadFilesSlice.ts","context/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["audioPlayerSlice","createSlice","name","initialState","reducers","setRef","state","action","htmlRef","payload","actions","globalSlice","loading","setLoading","selectLoading","global","uploadFilesSlice","addFile","push","selectUploadFiles","uploadFiles","store","configureStore","reducer","uploadFilesReducer","audioPlayer","audioPlayerReducer","globalReducer","possibleAudioType","App","ref","useRef","useState","src","dispatch","useDispatch","files","useSelector","file","a","convertToArrayBuffer","x","current","getTags","tags","getAudioCover","cover","console","log","get","uid","type","album","artist","title","year","message","error","Promise","resolve","reject","jsmediatags","onSuccess","onError","fr","FileReader","readAsDataURL","onload","result","onerror","picture","base64String","data","map","value","String","fromCharCode","join","format","window","btoa","formatNumberTime","time","getAudioDuration","duration","intDuration","intervalToDuration","start","end","minutes","seconds","useEffect","audioRef","document","getElementById","LoadingOutlined","spinning","style","height","renderThumbVertical","props","className","color","id","controls","onTimeUpdate","e","currentTime","multiple","showUploadList","beforeUpload","includes","readFile","icon","UploadOutlined","shape","size","PlayCircleOutlined","onClick","play","PauseCircleOutlined","pause","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b8217ef6.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\ntype AudioPlayer = {\r\n    htmlRef?: HTMLAudioElement;\r\n};\r\n\r\nconst initialState: AudioPlayer = {};\r\n\r\nexport const audioPlayerSlice = createSlice({\r\n    name: 'audioPlayer',\r\n    initialState,\r\n    reducers: {\r\n        setRef: (state, action: PayloadAction<HTMLAudioElement>) => {\r\n            state.htmlRef = action.payload as any;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setRef } = audioPlayerSlice.actions;\r\n\r\nexport const selectAudioPlayer = (state: RootState) => state.audioPlayer;\r\n\r\nexport default audioPlayerSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'context/store';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n};\r\n\r\nexport const globalSlice = createSlice({\r\n    name: 'global',\r\n    initialState,\r\n    reducers: {\r\n        setLoading: (\r\n            state,\r\n            action: PayloadAction<typeof initialState.loading>\r\n        ) => {\r\n            state.loading = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setLoading } = globalSlice.actions;\r\n\r\nexport const selectLoading = (state: RootState) => state.global.loading;\r\n\r\nexport default globalSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Maybe } from 'constants/types';\r\nimport { RootState } from 'context/store';\r\n\r\nexport type AudioFile = {\r\n    uid: string;\r\n    type: string;\r\n    cover: Maybe<string>;\r\n    album: Maybe<string>;\r\n    artist: Maybe<string>;\r\n    title: Maybe<string>;\r\n    year: Maybe<string>;\r\n    src: string;\r\n};\r\n\r\nconst initialState: AudioFile[] = [];\r\n\r\nexport const uploadFilesSlice = createSlice({\r\n    name: 'uploadFiles',\r\n    initialState,\r\n    reducers: {\r\n        addFile: (state, action: PayloadAction<AudioFile>) => {\r\n            state.push(action.payload);\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addFile } = uploadFilesSlice.actions;\r\n\r\nexport const selectUploadFiles = (state: RootState) => state.uploadFiles;\r\n\r\nexport default uploadFilesSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport audioPlayerReducer from 'context/features/audioPlayerSlice';\r\nimport globalReducer from 'context/features/globalSlice';\r\nimport uploadFilesReducer from 'context/features/uploadFilesSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        uploadFiles: uploadFilesReducer,\r\n        audioPlayer: audioPlayerReducer,\r\n        global: globalReducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import {\r\n    LoadingOutlined,\r\n    PauseCircleOutlined,\r\n    PlayCircleOutlined,\r\n    UploadOutlined,\r\n} from '@ant-design/icons';\r\nimport { Button, Image, List, message, Spin, Upload } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { RcFile } from 'antd/lib/upload';\r\nimport 'App.less';\r\nimport { selectLoading, setLoading } from 'context/features/globalSlice';\r\nimport { addFile, selectUploadFiles } from 'context/features/uploadFilesSlice';\r\nimport { intervalToDuration } from 'date-fns';\r\nimport * as jsmediatags from 'jsmediatags-web';\r\nimport { get } from 'lodash';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ninterface FileInfo {\r\n    tags: {\r\n        picture?: {\r\n            data: number[];\r\n            format: string;\r\n        };\r\n        year?: string;\r\n        album?: string;\r\n        artist?: string;\r\n        title?: string;\r\n    };\r\n}\r\n\r\nconst possibleAudioType = [\r\n    'audio/wav',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'audio/aac',\r\n    'audio/aacp',\r\n    'audio/ogg',\r\n    'audio/webm',\r\n    'audio/x-caf',\r\n    'audio/flac',\r\n];\r\n\r\nfunction App() {\r\n    const ref = useRef<HTMLAudioElement | null>(null);\r\n    const [src, setSrc] = useState('');\r\n    const dispatch = useDispatch();\r\n    const files = useSelector(selectUploadFiles);\r\n    const loading = useSelector(selectLoading);\r\n\r\n    console.log(files, 'files');\r\n\r\n    async function readFile(file: RcFile) {\r\n        dispatch(setLoading(true));\r\n\r\n        try {\r\n            const src = await convertToArrayBuffer(file);\r\n            // const d: any = document.getElementById('audio');\r\n            const x = ref?.current;\r\n            if (x) {\r\n                x.src = src;\r\n            }\r\n            const tags = await getTags(file);\r\n            const cover = await getAudioCover(tags);\r\n\r\n            console.log(tags, 'tags');\r\n            console.log(get(tags, 'album'), 'album');\r\n            // setSrc(coverSrc);\r\n\r\n            dispatch(\r\n                addFile({\r\n                    uid: file.uid,\r\n                    type: file.type,\r\n                    cover,\r\n                    album: get(tags, 'album'),\r\n                    artist: get(tags, 'artist'),\r\n                    title: get(tags, 'title'),\r\n                    year: get(tags, 'year'),\r\n                    src,\r\n                })\r\n            );\r\n        } catch (e) {\r\n            message.error(`Error while processing audio files`);\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n    }\r\n\r\n    function getTags(file: RcFile) {\r\n        return new Promise<FileInfo['tags']>((resolve, reject) => {\r\n            jsmediatags.read(file, {\r\n                onSuccess({ tags }: FileInfo) {\r\n                    resolve(tags);\r\n                },\r\n                onError(error: any) {\r\n                    reject(error);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    function convertToArrayBuffer(file: RcFile) {\r\n        return new Promise<string>((resolve, reject) => {\r\n            var fr = new FileReader();\r\n            fr.readAsDataURL(file);\r\n            fr.onload = () => {\r\n                resolve(fr.result as string);\r\n            };\r\n            fr.onerror = (error) => {\r\n                reject(error);\r\n            };\r\n        });\r\n    }\r\n\r\n    const getAudioCover = (tags: FileInfo['tags']) => {\r\n        const { picture } = tags;\r\n\r\n        if (!picture) {\r\n            return null;\r\n        }\r\n\r\n        const { data } = picture;\r\n        const base64String = data\r\n            .map((value) => String.fromCharCode(value))\r\n            .join('');\r\n\r\n        return `data:${picture.format};base64,${window.btoa(base64String)}`;\r\n    };\r\n\r\n    const validateAudioFile = (type: string) =>\r\n        possibleAudioType.includes(type);\r\n\r\n    const formatNumberTime = (time: number) =>\r\n        time < 10 ? `0${time}` : `${time}`;\r\n\r\n    const getAudioDuration = (duration: number) => {\r\n        const intDuration = intervalToDuration({\r\n            start: 0,\r\n            end: duration * 1000,\r\n        });\r\n\r\n        return `${formatNumberTime(\r\n            intDuration.minutes || 0\r\n        )}:${formatNumberTime(intDuration.seconds || 0)}`;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const audioRef = document.getElementById('audio');\r\n        console.log(audioRef);\r\n    }, []);\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n    return (\r\n        <Spin spinning={loading}>\r\n            <Scrollbars\r\n                style={{ height: '100vh' }}\r\n                renderThumbVertical={({ style, ...props }) => {\r\n                    const thumbStyle = {\r\n                        color: `red`,\r\n                    };\r\n                    return (\r\n                        <div\r\n                            className=\"bg-color-primary\"\r\n                            style={{ ...style, ...thumbStyle }}\r\n                            {...props}\r\n                        />\r\n                    );\r\n                }}\r\n            >\r\n                <div className=\"App\">\r\n                    <audio\r\n                        id=\"audio\"\r\n                        ref={ref}\r\n                        controls\r\n                        onTimeUpdate={(e) =>\r\n                            console.log(\r\n                                getAudioDuration(ref?.current?.currentTime || 0)\r\n                            )\r\n                        }\r\n                    />\r\n                    <Image src={src} />\r\n                    <Upload\r\n                        multiple\r\n                        showUploadList={false}\r\n                        beforeUpload={(file) => {\r\n                            if (validateAudioFile(file.type)) {\r\n                                readFile(file);\r\n                            } else {\r\n                                message.error(\r\n                                    `Incorrect audio format from ${file.name}`\r\n                                );\r\n                            }\r\n\r\n                            return false;\r\n                        }}\r\n                    >\r\n                        <Button type=\"primary\" icon={<UploadOutlined />}>\r\n                            Select File\r\n                        </Button>\r\n                    </Upload>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"large\"\r\n                        icon={\r\n                            <PlayCircleOutlined\r\n                                onClick={() => ref.current?.play()}\r\n                            />\r\n                        }\r\n                    />\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"large\"\r\n                        icon={\r\n                            <PauseCircleOutlined\r\n                                onClick={() => ref.current?.pause()}\r\n                            />\r\n                        }\r\n                    />\r\n                    {getAudioDuration(ref.current?.duration || 0)}\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={files}\r\n                        renderItem={(item) => (\r\n                            <List.Item>\r\n                                <List.Item.Meta\r\n                                    avatar={<Avatar src={item.cover} />}\r\n                                    title={item.title}\r\n                                    description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </Scrollbars>\r\n        </Spin>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { store } from 'context/store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}